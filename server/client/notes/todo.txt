07/03/23 Meeting note:
  Backend DB is a single source of truth. Changes made to cards  that are performed by client will have to pass necessary data to backend where data receives CRUD operation, and is returned back to redux where app state gets updated and re-rendered.  (moveCard action creator for now, others added as app grows ).
  This ensures a unidirectonal data flow (MVC Pattern).

Redux Toolkit ToDos:

Create following slices and action creators:

- populateStateThunk: async request to backend for application state data;
- add moveCardThunk: async request to backend with data that needs to be updated;
- add extraReducers for moveCardthunk;

List Functionality:
- add "add a card button"
  1. Save input text in variable name;
  2. Generate random 5 charachter id string and save it in variable _id;
  3. Refactor handleSubmitClick to dispatch "addCard" action with payload containing name, _id, boardId, listId;












Data Flow: 

REdux State gets hydrated from backend api; (for now hardcoded);

(Boards and Cards get their props from Redux State: const boards = useSelecotor(state => state.boards);)

DRAG PORTION OF moveCard action: Movig a card from one board to another means filtering Source Board array for Cards whos ids are not equal to source card;

DROP PORTION of moveCard action: means adding a source card to the Target Boad array.

Props needed to obtain during drag and drop:
- DRAG SOURCE BOARD ID
- DROP SOUCE BOARD ID
- CARD ID


Component hierarchy and prop management:
HomeScreen renders Board and Board renders Cards 
