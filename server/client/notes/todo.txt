07/03/23 Meeting note:
  Backend DB is a single source of truth. Changes made to cards  that are performed by client will have to pass necessary data to backend where data receives CRUD operation, and is returned back to redux where app state gets updated and re-rendered.  (moveCard action creator for now, others added as app grows ).
  This ensures a unidirectonal data flow (MVC Pattern).

Redux Toolkit ToDos:

Create following slices and action creators:
- dragAndDrop slice: startDrag/stopDrag action creators:  use to change UI elements
- moveCard: change state boards' composition depending on user dragging cards from list to list; 

Issues at hand:

- moveCard action does not pass cardId to target list
- moveCard fails to delete card from source list
- target lists allow duplicate cards
- source list allows card to be dropped into same list and causes it to duplicate card in the source list











Data Flow: 

REdux State gets hydrated from backend api; (for now hardcoded);

(Boards and Cards get their props from Redux State: const boards = useSelecotor(state => state.boards);)

DRAG PORTION OF moveCard action: Movig a card from one board to another means filtering Source Board array for Cards whos ids are not equal to source card;

DROP PORTION of moveCard action: means adding a source card to the Target Boad array.

Props needed to obtain during drag and drop:
- DRAG SOURCE BOARD ID
- DROP SOUCE BOARD ID
- CARD ID


Component hierarchy and prop management:
HomeScreen renders Board and Board renders Cards 
